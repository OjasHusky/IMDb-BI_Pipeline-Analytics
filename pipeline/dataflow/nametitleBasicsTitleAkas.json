{
	"name": "nametitleBasicsTitleAkas",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "name_basics",
						"type": "DatasetReference"
					},
					"name": "nameBasics"
				},
				{
					"dataset": {
						"referenceName": "title_basics",
						"type": "DatasetReference"
					},
					"name": "titleBasics"
				},
				{
					"dataset": {
						"referenceName": "title_akas",
						"type": "DatasetReference"
					},
					"name": "titleAkas"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeSTGNameBasics",
						"type": "DatasetReference"
					},
					"name": "sink"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTitleBasics",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTitleAkas",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumns1"
				},
				{
					"name": "flatteningPrfsTitleCols"
				},
				{
					"name": "derivedColumns2"
				},
				{
					"name": "flatteningGenres"
				},
				{
					"name": "derivedColumns3"
				},
				{
					"name": "flatteningTypesAttriCols"
				}
			],
			"scriptLines": [
				"source(output(",
				"          nconst as string,",
				"          primaryName as string,",
				"          birthYear as string,",
				"          deathYear as string,",
				"          primaryProfession as string,",
				"          knownForTitles as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false) ~> nameBasics",
				"source(output(",
				"          tconst as string,",
				"          titleType as string,",
				"          primaryTitle as string,",
				"          originalTitle as string,",
				"          isAdult as string,",
				"          startYear as string,",
				"          endYear as string,",
				"          runtimeMinutes as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false) ~> titleBasics",
				"source(output(",
				"          titleId as string,",
				"          ordering as string,",
				"          title as string,",
				"          region as string,",
				"          language as string,",
				"          types as string,",
				"          attributes as string,",
				"          isOriginalTitle as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false) ~> titleAkas",
				"nameBasics derive(primaryProfession = split(primaryProfession,','),",
				"          knownForTitles = split(knownForTitles,',')) ~> derivedColumns1",
				"derivedColumns1 foldDown(unrollMultiple(primaryProfession,knownForTitles),",
				"     mapColumn(",
				"          nconst,",
				"          primaryName,",
				"          birthYear,",
				"          deathYear,",
				"          primaryProfession,",
				"          knownForTitles",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatteningPrfsTitleCols",
				"titleBasics derive(genres = split(genres,',')) ~> derivedColumns2",
				"derivedColumns2 foldDown(unroll(genres),",
				"     mapColumn(",
				"          tconst,",
				"          titleType,",
				"          primaryTitle,",
				"          originalTitle,",
				"          isAdult,",
				"          startYear,",
				"          endYear,",
				"          runtimeMinutes,",
				"          genres",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatteningGenres",
				"titleAkas derive(types = split(types,','),",
				"          attributes = split(attributes,',')) ~> derivedColumns3",
				"derivedColumns3 foldDown(unrollMultiple(types,attributes),",
				"     mapColumn(",
				"          titleId,",
				"          ordering,",
				"          title,",
				"          region,",
				"          language,",
				"          types,",
				"          attributes,",
				"          isOriginalTitle",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatteningTypesAttriCols",
				"flatteningPrfsTitleCols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          NCONST as string,",
				"          PRIMARYNAME as string,",
				"          BIRTHYEAR as decimal(38,0),",
				"          DEATHYEAR as decimal(38,0),",
				"          PRIMARYPROFESSION as string,",
				"          KNOWNFORTITLES as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          NCONST = nconst,",
				"          PRIMARYNAME = primaryName,",
				"          BIRTHYEAR = birthYear,",
				"          DEATHYEAR = deathYear,",
				"          PRIMARYPROFESSION = primaryProfession,",
				"          KNOWNFORTITLES = knownForTitles",
				"     )) ~> sink",
				"flatteningGenres sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          TCONST as string,",
				"          TITLETYPE as string,",
				"          PRIMARYTITLE as string,",
				"          ORIGINALTITLE as string,",
				"          ISADULT as boolean,",
				"          STARTYEAR as decimal(38,0),",
				"          ENDYEAR as decimal(38,0),",
				"          RUNTIMEMINUTES as decimal(38,0),",
				"          GENRES as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          TCONST = tconst,",
				"          TITLETYPE = titleType,",
				"          PRIMARYTITLE = primaryTitle,",
				"          ORIGINALTITLE = originalTitle,",
				"          ISADULT = isAdult,",
				"          STARTYEAR = startYear,",
				"          ENDYEAR = endYear,",
				"          RUNTIMEMINUTES = runtimeMinutes,",
				"          GENRES = genres",
				"     )) ~> sink1",
				"flatteningTypesAttriCols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          TITLEID as string,",
				"          ORDERING as decimal(38,0),",
				"          TITLE as string,",
				"          REGION as string,",
				"          LANGUAGE as string,",
				"          TYPES as string,",
				"          ATTRIBUTES as string,",
				"          ISORIGINALTITLE as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          TITLEID = titleId,",
				"          ORDERING = ordering,",
				"          TITLE = title,",
				"          REGION = region,",
				"          LANGUAGE = language,",
				"          TYPES = types,",
				"          ATTRIBUTES = attributes,",
				"          ISORIGINALTITLE = isOriginalTitle",
				"     )) ~> sink2"
			]
		}
	}
}